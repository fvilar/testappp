/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OAuth as PrismaOAuth,
  ApplicationUser as PrismaApplicationUser,
} from "@prisma/client";

export class OAuthServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OAuthCountArgs, "select">): Promise<number> {
    return this.prisma.oAuth.count(args);
  }

  async oAuths(args: Prisma.OAuthFindManyArgs): Promise<PrismaOAuth[]> {
    return this.prisma.oAuth.findMany(args);
  }
  async oAuth(args: Prisma.OAuthFindUniqueArgs): Promise<PrismaOAuth | null> {
    return this.prisma.oAuth.findUnique(args);
  }
  async createOAuth(args: Prisma.OAuthCreateArgs): Promise<PrismaOAuth> {
    return this.prisma.oAuth.create(args);
  }
  async updateOAuth(args: Prisma.OAuthUpdateArgs): Promise<PrismaOAuth> {
    return this.prisma.oAuth.update(args);
  }
  async deleteOAuth(args: Prisma.OAuthDeleteArgs): Promise<PrismaOAuth> {
    return this.prisma.oAuth.delete(args);
  }

  async findApplicationUsers(
    parentId: string,
    args: Prisma.ApplicationUserFindManyArgs
  ): Promise<PrismaApplicationUser[]> {
    return this.prisma.oAuth
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applicationUsers(args);
  }
}
