/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OAuth } from "./OAuth";
import { OAuthCountArgs } from "./OAuthCountArgs";
import { OAuthFindManyArgs } from "./OAuthFindManyArgs";
import { OAuthFindUniqueArgs } from "./OAuthFindUniqueArgs";
import { CreateOAuthArgs } from "./CreateOAuthArgs";
import { UpdateOAuthArgs } from "./UpdateOAuthArgs";
import { DeleteOAuthArgs } from "./DeleteOAuthArgs";
import { ApplicationUserFindManyArgs } from "../../applicationUser/base/ApplicationUserFindManyArgs";
import { ApplicationUser } from "../../applicationUser/base/ApplicationUser";
import { OAuthService } from "../oAuth.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OAuth)
export class OAuthResolverBase {
  constructor(
    protected readonly service: OAuthService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OAuth",
    action: "read",
    possession: "any",
  })
  async _oAuthsMeta(
    @graphql.Args() args: OAuthCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OAuth])
  @nestAccessControl.UseRoles({
    resource: "OAuth",
    action: "read",
    possession: "any",
  })
  async oAuths(@graphql.Args() args: OAuthFindManyArgs): Promise<OAuth[]> {
    return this.service.oAuths(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OAuth, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OAuth",
    action: "read",
    possession: "own",
  })
  async oAuth(
    @graphql.Args() args: OAuthFindUniqueArgs
  ): Promise<OAuth | null> {
    const result = await this.service.oAuth(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OAuth)
  @nestAccessControl.UseRoles({
    resource: "OAuth",
    action: "create",
    possession: "any",
  })
  async createOAuth(@graphql.Args() args: CreateOAuthArgs): Promise<OAuth> {
    return await this.service.createOAuth({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OAuth)
  @nestAccessControl.UseRoles({
    resource: "OAuth",
    action: "update",
    possession: "any",
  })
  async updateOAuth(
    @graphql.Args() args: UpdateOAuthArgs
  ): Promise<OAuth | null> {
    try {
      return await this.service.updateOAuth({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OAuth)
  @nestAccessControl.UseRoles({
    resource: "OAuth",
    action: "delete",
    possession: "any",
  })
  async deleteOAuth(
    @graphql.Args() args: DeleteOAuthArgs
  ): Promise<OAuth | null> {
    try {
      return await this.service.deleteOAuth(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ApplicationUser], { name: "applicationUsers" })
  @nestAccessControl.UseRoles({
    resource: "ApplicationUser",
    action: "read",
    possession: "any",
  })
  async findApplicationUsers(
    @graphql.Parent() parent: OAuth,
    @graphql.Args() args: ApplicationUserFindManyArgs
  ): Promise<ApplicationUser[]> {
    const results = await this.service.findApplicationUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
